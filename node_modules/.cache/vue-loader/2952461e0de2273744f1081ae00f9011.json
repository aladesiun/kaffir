{"remainingRequest":"C:\\Users\\USER\\newkaffir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\USER\\newkaffir\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\USER\\newkaffir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USER\\newkaffir\\src\\components\\public\\home.vue?vue&type=template&id=2a276f36&scoped=true&","dependencies":[{"path":"C:\\Users\\USER\\newkaffir\\src\\components\\public\\home.vue","mtime":1636927425057},{"path":"C:\\Users\\USER\\newkaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\newkaffir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USER\\newkaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\newkaffir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}